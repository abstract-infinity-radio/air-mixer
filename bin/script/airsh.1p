.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "AIRSH 1"
.TH AIRSH 1 "2023-03-16" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBairsh\fR :: \s-1AIR\s0 shell, a simple air\-coremix.pd control shell to demonstrate \s-1OSC\s0 parameters that control the \fB\s-1AIR\s0 core mixer\fR and \fB\s-1AIR\s0 console\fR | \fBB\-AIR project Creative Europe 2020\-2023\fR
.PP
This manual is formally a part of \fBairsh\fR but serves as a wider explanation of whole web audio/control framework concieved to support the B\-AIR project's \fB\s-1AIR\s0 platform\fR.
.SH "\fBPUREDATA gpp-air-coremixer ELEMENT\fP [server\-side]"
.IX Header "PUREDATA gpp-air-coremixer ELEMENT [server-side]"
OSC-controlled puredata core mixer for \s-1AIR\s0 platform:
.PP
[ \fBgpp\-air\-coremixer.pd\fR <num.input.channels> <\s-1OSC\s0.inaddress> <\s-1OSC\s0.outaddress> ]
.PP
Air core mixer will automatically connect to the <jackd> / <jacktrip> \-provided channels via puredata input [adc~] and output [dac~]. Although technically unlimited, within this setup (\s-1AIR\s0 platform) the core mixer will provide stereo master output and a separate prelisten-bus (as an audio-premonitoring option). The number of the input channels is arbitrary, set as a creation argument to the core mixer. \fBgpp-air-coremix\fR will take the following creation arguments:
.IP "[=] Number of channels (creation arg)" 3
.IX Item "[=] Number of channels (creation arg)"
.PD 0
.IP "[=] \s-1OSC\s0 receiver address and port (creation arg)" 3
.IX Item "[=] OSC receiver address and port (creation arg)"
.IP "[=] \s-1OSC\s0 sender (backlink) port (creation arg)" 3
.IX Item "[=] OSC sender (backlink) port (creation arg)"
.IP "[\-] inlet1 : puredata [netreceive] control input (debugging purposes)" 3
.IX Item "[-] inlet1 : puredata [netreceive] control input (debugging purposes)"
.IP "[\-] inlet2 : direct mixer input (debugging purposes)" 3
.IX Item "[-] inlet2 : direct mixer input (debugging purposes)"
.PD
.SH "\fBgpp-air-coremixer and jacktrip\fP"
.IX Header "gpp-air-coremixer and jacktrip"
\&\fBgpp-air-coremixer\fR is primarily intended to be used with Stanford \s-1CCRMA\s0 \fBjacktrip\fR audio networking solution, based on Jack server, primarily in \fBhub mode\fR, following two possible audio-scheme scenarios, which differ in network-bandwidth demands, quality of user experience and flexibility:
.IP "[ \fBfull\fR ] good networking conditions: each client broadcasting their channels and receiving all but themselves (jacktrip hubpatch mode 2). \fBgpp-air-console\fR, a separate part of \fBgpp-air-coremixer\fR, serves the purpose of monitoring and controlling this proces \fB[#]\fR and, above all, master mixing. In this scenario, each client will mix their own master and prelisten bus (via \fBgpp-air-console\fR). In this scenario, bandwidth issues may affect the very structure of mix(es)." 3
.IX Item "[ full ] good networking conditions: each client broadcasting their channels and receiving all but themselves (jacktrip hubpatch mode 2). gpp-air-console, a separate part of gpp-air-coremixer, serves the purpose of monitoring and controlling this proces [#] and, above all, master mixing. In this scenario, each client will mix their own master and prelisten bus (via gpp-air-console). In this scenario, bandwidth issues may affect the very structure of mix(es)."
.PD 0
.IP "." 3
.IP "[ \fBlight\fR ] poor networking conditions: each client broadcasting their own channels but receiving only final mix (jacktrip hubpatch mode 0). Master mixer will also receive prelisten bus, but this one is mixed by master (gpp-air-coremix). A single prelisten-bus is established, available to the master-mixer but not for the other remote members. In this scenario, bandwidth issues may cause serious delay in perception of the final mix feedback." 3
.IX Item "[ light ] poor networking conditions: each client broadcasting their own channels but receiving only final mix (jacktrip hubpatch mode 0). Master mixer will also receive prelisten bus, but this one is mixed by master (gpp-air-coremix). A single prelisten-bus is established, available to the master-mixer but not for the other remote members. In this scenario, bandwidth issues may cause serious delay in perception of the final mix feedback."
.PD
.PP
Links, explaining the context:
.PP
[\fB\s-1OSC\s0 protocol\fR] \f(CW\*(C`https://ccrma.stanford.edu/groups/osc/index.html\*(C'\fR
.PP
[\fBjacktrip\fR] \f(CW\*(C`https://ccrma.stanford.edu/software/jacktrip/\*(C'\fR
.PP
[\fBjacktrip\fR] \f(CW\*(C`https://ccrma.stanford.edu/groups/soundwire/software/jacktrip/\*(C'\fR
.PP
[\fBjacktrip\fR modes] \f(CW\*(C`https://www.haven2.com/index.php/archives/jacktrip\-hub\-mode\-server\-options\*(C'\fR
.PP
[\fBjack server\fR] \f(CW\*(C`https://jackaudio.org/\*(C'\fR
.PP
\&.
.SH "WHO CAN CONNECT"
.IX Header "WHO CAN CONNECT"
.IP "[\fBjacktrip\fR] Any client that can run and make use of \fB\s-1CCRMA\s0 Jack / jacktrip\fR can join. According to our pre-testing even connection via modern smartphones works decently. Jack / jacktrip is free software solution. [all open-source software]" 3
.IX Item "[jacktrip] Any client that can run and make use of CCRMA Jack / jacktrip can join. According to our pre-testing even connection via modern smartphones works decently. Jack / jacktrip is free software solution. [all open-source software]"
.PD 0
.IP "." 3
.IP "[\fBgpp-air-console\fR] Any client that can run full installation of \fBpuredata 0.51+\fR [open\-source software]" 3
.IX Item "[gpp-air-console] Any client that can run full installation of puredata 0.51+ [open-source software]"
.IP "." 3
.ie n .IP "[\fBairsh\fR] Any client that can run Perl programming language v5.28 or higher ""https://www.perl.org/"". Air shell is actually a simple \s-1OSC\s0 sender so it can be easily implemented in different software environments. All processing is done by \fBgpp-air-coremix\fR." 3
.el .IP "[\fBairsh\fR] Any client that can run Perl programming language v5.28 or higher \f(CWhttps://www.perl.org/\fR. Air shell is actually a simple \s-1OSC\s0 sender so it can be easily implemented in different software environments. All processing is done by \fBgpp-air-coremix\fR." 3
.IX Item "[airsh] Any client that can run Perl programming language v5.28 or higher https://www.perl.org/. Air shell is actually a simple OSC sender so it can be easily implemented in different software environments. All processing is done by gpp-air-coremix."
.IP "." 3
.PD
.SH "CONNECTIVITY"
.IX Header "CONNECTIVITY"
A channel input can be connected either \s-1MONO\s0 or \s-1STEREO.\s0 Currently, there's no option to recognize whether the jack has been mono or stereo connected within \s-1PD,\s0 so only manual option remains:
.IP "<ch> mono : set selected channels into mono mode" 3
.IX Item "<ch> mono : set selected channels into mono mode"
.PD 0
.IP "<ch> stereo : set selected channels into stereo mode" 3
.IX Item "<ch> stereo : set selected channels into stereo mode"
.IP "mono : shortcut to set mono mode globally" 3
.IX Item "mono : shortcut to set mono mode globally"
.IP "stereo : shortcut to set  stereo mode globally" 3
.IX Item "stereo : shortcut to set stereo mode globally"
.PD
.PP
\&\fB\s-1IMPORTANT\s0\fR A \fBmono\fR wire should be connected to \fBboth stereo inputs\fR in order to assure proper operation.
.PP
A stereo/mono led indicator on the top of each channel fader shows the stereo/mono state.
.SH "CONTROL WORKFLOW"
.IX Header "CONTROL WORKFLOW"
.SS "\fBairmix and airmon\fP control and monitoring \s-1OSC\s0 streams"
.IX Subsection "airmix and airmon control and monitoring OSC streams"
.SS ""
.IX Subsection ""
*** \fBclient\fR | user action\->[\fBairsh\fR or a midi mixer controller connected via \fBgpp-air-midisender\fR]
.PP
===> airmix_protocol ===> [\fBgpp-air-coremix\fR | server] =====>airmon_protocol=====>
.PP
[\fBgpp-air-console\fR]\->user perception | \fBclient\fR ***
.SS ""
.IX Subsection ""
.IP "[\-]" 3
\&\fBairsh\fR [\fBair shell\fR], though text-based, allows for targeted and complex multi\- controller operation, such as addressing complex spans of channels, describing complex ramps for controllers and triggering gadgets such as player / recorder ([#] more to come in future). This functionality (conceptually) transcends simple physical-faders-and-knobs operating mode, although, of course, will always represent 'a different kind of game'. The combination of both, external physical controller and air shell might represent a win-win combination in controlling different cases and situations during live mixing.
.IP "[\-]" 3
\&\fBgpp-air-midisender\fR is actually a simple midi frontend talking to \fBgpp-air-coremix\fR sitting at server-side. It can be set up to control any parameters, basic or high resolution faders/knobs (nrpn).
.IP "[\-]" 3
\&\fBgpp-air-console\fR is bi-directionally connected to \fBgpp-air-coremix\fR and \fBgpp-air-midisender\fR slaves to \fBgpp-air-console\fR. All the crucial init parameters such as number of channels are automatically synchronized if changed on the server. Currently, the console intended as master-mixer monitoring device, but shall be developed [#] into \fBclient monitoring and organizing tool\fR in order to \fBprovide complete mixing and input/output channels overview to each client\fR (in the context of 'full' audio-scheme scenario as described above).
.IP "." 3
.SH "\fBPUREDATA gpp-air-console ELEMENT\fP [client\-side]"
.IX Header "PUREDATA gpp-air-console ELEMENT [client-side]"
[ \fBgpp\-air\-console.pd\fR <\s-1OSC\s0.inaddress> <\s-1OSC\s0.outaddress> ]
.IP "[=] \s-1OSC\s0 receiver address and port (creation arg)" 3
.IX Item "[=] OSC receiver address and port (creation arg)"
.PD 0
.IP "[=] \s-1OSC\s0 sender (backlink) port (creation arg)" 3
.IX Item "[=] OSC sender (backlink) port (creation arg)"
.IP "[\-] inlet1 and outlet1 for bi-directional communication with the optional \fBgpp-air-midisender\fR at the client side" 3
.IX Item "[-] inlet1 and outlet1 for bi-directional communication with the optional gpp-air-midisender at the client side"
.PD
.SH "\fBPUREDATA gpp-midisender ELEMENT\fP [client\-side]"
.IX Header "PUREDATA gpp-midisender ELEMENT [client-side]"
.IP "[\-] inlet1 : input for \fBgpp-air-console\fR commands [connected to console's outlet1]" 3
.IX Item "[-] inlet1 : input for gpp-air-console commands [connected to console's outlet1]"
.PD 0
.IP "[\-] inlet2 : midi setup \- in" 3
.IX Item "[-] inlet2 : midi setup - in"
.IP "[\-] outlet1 : number of channels and input address/port monitoring state" 3
.IX Item "[-] outlet1 : number of channels and input address/port monitoring state"
.IP "[\-] outlet2 : \fBgpp-air-console\fR init-bang (querying server for crucial parameters such as number of channels and server-receive \s-1OSC\s0 addres [connected to console's inlet1]" 3
.IX Item "[-] outlet2 : gpp-air-console init-bang (querying server for crucial parameters such as number of channels and server-receive OSC addres [connected to console's inlet1]"
.IP "[\-] outlet3 : midi setup \- out" 3
.IX Item "[-] outlet3 : midi setup - out"
.PD
.SH "AIRMIX :: AIR CORE MIXER OSC COMMAND PROTOCOL"
.IX Header "AIRMIX :: AIR CORE MIXER OSC COMMAND PROTOCOL"
.SS "\s-1CHANNEL ADDRESSING\s0"
.IX Subsection "CHANNEL ADDRESSING"
The structure of the \s-1OSC\s0 message is:
.PP
\&\fB/airmix/<channel>/<controller> argument(s)\fR
.PP
where channel =
.IP "master (in short: m)" 3
.IX Item "master (in short: m)"
.PD 0
.IP "prelisten | preunmute (in short: p pu)" 3
.IX Item "prelisten | preunmute (in short: p pu)"
.IP "<channel> | <channel_span> | <channel_selection_alias> \- see \fB\s-1CHANNEL_SPAN AND CHANNEL_ALIASING\s0\fR" 3
.IX Item "<channel> | <channel_span> | <channel_selection_alias> - see CHANNEL_SPAN AND CHANNEL_ALIASING"
.PD
.SH "MONITORING"
.IX Header "MONITORING"
.SS "<ch> \fBmon\fP / <ch> \fBnom\fP"
.IX Subsection "<ch> mon / <ch> nom"
local per-channel monitoring; provides a pd gui window for each separate channel in the selected span (server-side).
.SS "\fBmix / xim\fP"
.IX Subsection "mix / xim"
show whole mixer-monitor in a single pd window. mixer-monitor is a gui element directly rendered by the \fBserver\fR and is intended for direct monitoring on the server side.
.SS "\fBcon / noc\fP"
.IX Subsection "con / noc"
inform remote client (gpp-air-console user) to show or hide console gui window (a remote version of mixer-monitor in a single pd window)
.SH "CONTROLLERS"
.IX Header "CONTROLLERS"
.SS "\fBmaster|m\fP \fBfader|f|level\fP <airliner_vector>"
.IX Subsection "master|m fader|f|level <airliner_vector>"
send \fBairliner_vector\fR to a master fader (both channels)
.SS "\fBmaster|m\fP \fBlfader|rfader|left|right\fP <airliner_vector>"
.IX Subsection "master|m lfader|rfader|left|right <airliner_vector>"
send \fBairliner_vector\fR to a master fader (separate channels)
.SS "<ch> \fBfader|f\fP <airliner_vector>"
.IX Subsection "<ch> fader|f <airliner_vector>"
send \fBairliner_ector\fR to a separate channel's faders
.PP
* faders are dynamic. a ramp can be interrupted with a new ramp at any point and will continue to flow from that point on. Airliner vector curves will \fBscale\fR up/down to adapt to the height of the new window to cover.
.SS "<ch> \fBpan|p\fP <airliner_vector>"
.IX Subsection "<ch> pan|p <airliner_vector>"
send an \fBairliner_vector\fR to a separate channel pan
.PP
* \fB\s-1NOTE\s0\fR master has no pan but both faders /stereo/ instead
.SH "\fBAIRLINER_VECTOR\fP"
.IX Header "AIRLINER_VECTOR"
is managed by gpp\-airliner~.pm. Airliner can be bound to any mixer param, currently it controls \fBfaders\fR and \fBpanning\fR
.PP
it will accept 1 \- 4 input parameters:
.PP
<\fBvalue_to_reach [rms 0\-1]\fR>  <\fBtime_of_operation [ms]\fR>\fB?\fR  <\fBcurve [string \- see below]\fR>\fB?\fR  <\fBinitial delay [ms]\fR>\fB?\fR
.PP
where only the first parameter, <\fBvalue_to_reach [rms 0\-1]\fR>, is compulsory. The other three, if omitted, will default to:
.IP "<\fBtime_of_operation [ms]\fR> defaults to 'jump' micro-fader time (50 ms)" 7
.IX Item "<time_of_operation [ms]> defaults to 'jump' micro-fader time (50 ms)"
.PD 0
.IP "<\fBcurve [see]\fR> defaults to 'lin' or 'linear'" 7
.IX Item "<curve [see]> defaults to 'lin' or 'linear'"
.IP "<\fBinitial delay [ms]\fR> defaults to 0" 7
.IX Item "<initial delay [ms]> defaults to 0"
.PD
.PP
Currently available curves:
.IP "\fBjump\fR micro-fader (50ms) linear curve" 3
.IX Item "jump micro-fader (50ms) linear curve"
.PD 0
.IP "\fBlin\fR linear" 3
.IX Item "lin linear"
.IP "\fBsin\fR sinusoidal (soft)" 3
.IX Item "sin sinusoidal (soft)"
.IP "\fBhsin\fR half-sinusoidal (equal power)" 3
.IX Item "hsin half-sinusoidal (equal power)"
.IP "\fBlog\fR logarithmic, hard neck" 3
.IX Item "log logarithmic, hard neck"
.IP "\fBpow\fR power (exponential), slow sudden attack" 3
.IX Item "pow power (exponential), slow sudden attack"
.PD
.SS "<airliner_vector> examples"
.IX Subsection "<airliner_vector> examples"
.IP "\fB0.9\fR => jump to 0.9" 3
.IX Item "0.9 => jump to 0.9"
.PD 0
.IP "\fB0.422 7500\fR => slide to 0.422 in 7.5 seconds" 3
.IX Item "0.422 7500 => slide to 0.422 in 7.5 seconds"
.IP "\fB1 4230 sin\fR => slide to 1 in 4.23 seconds following sinusoidal curve" 3
.IX Item "1 4230 sin => slide to 1 in 4.23 seconds following sinusoidal curve"
.IP "\fB0.5 7600 pow 2000\fR => slide to .5 in 7.6 seconds following power curve, but start after 2 seconds from now" 3
.IX Item "0.5 7600 pow 2000 => slide to .5 in 7.6 seconds following power curve, but start after 2 seconds from now"
.PD
.SH "AUDIO PRODUCTION / PROCESSING TOOLS"
.IX Header "AUDIO PRODUCTION / PROCESSING TOOLS"
.SS "\fB\s-1PLAY\s0\fP"
.IX Subsection "PLAY"
<ch> play <file>
.PP
Play a file (wav,aiff)
.PP
<ch> play <file> <hh:mm:ss.uuu>
.PP
Play a \fBfile\fR from the selected \fBtiming\fR on
.PP
<ch> play <file> <hh:mm:ss.uuu> <hh:mm:ss.uuu>
.PP
Play a \fBfile\fR from the selected \fBtiming\fR to the selected \fBend\fR
.PP
<ch> play <file> <hh:mm:ss.uuu> <hh:mm:ss.uuu> +<hh:mm:ss.uuu>
.PP
Play a \fBfile\fR from the selected \fBtiming\fR to the selected \fBend\fR with the selected \fB+delay\fR. Note that the player / looper delay parameter should be marked with \fB+\fR
.PP
<ch>  stop
.PP
Stop current playing session at channel(s) <ch>
.SS "\fB\s-1LOOP\s0\fP"
.IX Subsection "LOOP"
<ch> loop <file>
.PP
Loop whole \fBfile\fR
.PP
<ch> loop <file>  <hh:mm:ss.uuu> <hh:mm:ss.uuu>
.PP
Loop \fBfile clip\fR from selected \fBtiming\fR to selected \fBtiming\fR
.PP
<ch> loop <file>  <hh:mm:ss.uuu> <hh:mm:ss.uuu> +<hh:mm:ss.uuu>
.PP
Loop \fBfile clip\fR from selected \fBtiming\fR to selected \fBtiming\fR with intermediate \fB+delay\fR
.PP
<ch>  stop
.PP
Stop current looping session at channel(s) <ch>
.SS "\fB\s-1RECORD\s0\fP"
.IX Subsection "RECORD"
<ch> record <file>
.PP
Record to \fBfile\fR
.PP
<ch> record <file>  <hh:mm:ss.uuu>
.PP
Record to \fBfile\fR after initial \fB+delay\fR
.PP
<ch> record <file>  <hh:mm:ss.uuu>  <hh:mm:ss.uuu>
.PP
Record to \fBfile\fR after initial \fBlead-in\fR a \fBlenght\fR long clip. The second figure being interval length. Timing display will change color to red when the recording actually starts.
.PP
<ch> stop
.PP
Stop current recording session at the addressed channel
.SS "\fB\s-1OTHER\s0\fP"
.IX Subsection "OTHER"
\&\fBgpp-playhed\fR will be added in future to enable complex manipulations of \s-1PLAY\s0 function (speed change, different ways of oscillating ramps, granulation/heartbeat etc...) [#] Performance-sensitive, will have to be tested in terms of mass channel addressing and potentially heavy monitoring OSC-traffic.
.SH "\fBCHANNEL_SPAN AND CHANNEL_ALIASING\fP"
.IX Header "CHANNEL_SPAN AND CHANNEL_ALIASING"
<ch> refers to:
.IP "\fBchannel number\fR : send to a selected channel" 3
.IX Item "channel number : send to a selected channel"
.PD 0
.IP "\fBall\fR : send to all channels" 3
.IX Item "all : send to all channels"
.IP "\fBeven\fR : send to even-numbered channels" 3
.IX Item "even : send to even-numbered channels"
.IP "\fBodd\fR : send to odd-numbered channels" 3
.IX Item "odd : send to odd-numbered channels"
.IP "\fBselection span\fR : send to a selection span which consist from '\-' delimited ranges and ',' delimited lists, for instance \fB1,3,5\-7\fR" 3
.IX Item "selection span : send to a selection span which consist from '-' delimited ranges and ',' delimited lists, for instance 1,3,5-7"
.PD
.SH "\fBGLOBAL AND PER-CHANNEL COMMANDS\fP"
.IX Header "GLOBAL AND PER-CHANNEL COMMANDS"
.SS "\fBsolo, mute\fP"
.IX Subsection "solo, mute"
.IP "\fB<ch\fR> \fBsolo\fR : set the channel 'solo' : set corresponding mutes and also send \fBsetsolo\fR boolean signal" 3
.IX Item "<ch> solo : set the channel 'solo' : set corresponding mutes and also send setsolo boolean signal"
.PD 0
.IP "\fB<ch\fR> \fBunsolo\fR | \fBus\fR : set the channel 'not solo' : set corresponding mutes and also send \fBsetsolo\fR boolean signal" 3
.IX Item "<ch> unsolo | us : set the channel 'not solo' : set corresponding mutes and also send setsolo boolean signal"
.IP "\fBmaster\fR \fBmute\fR | \fBm\fR : mute  master channel (monitored via setmute boolean )" 3
.IX Item "master mute | m : mute master channel (monitored via setmute boolean )"
.IP "\fB<ch\fR> \fBmute\fR | \fBm\fR : mute selected channel (processed and monitored via \fBsetmute\fR boolean )" 3
.IX Item "<ch> mute | m : mute selected channel (processed and monitored via setmute boolean )"
.IP "\fBmaster\fR \fBunmute\fR | \fBu\fR | \fBum\fR : mute the master channel (monitored via setmute boolean )" 3
.IX Item "master unmute | u | um : mute the master channel (monitored via setmute boolean )"
.IP "\fBmaster\fR \fBlunmute\fR | \fBlu\fR : mute left master channel (monitored via \fBsetlmute\fR boolean )" 3
.IX Item "master lunmute | lu : mute left master channel (monitored via setlmute boolean )"
.IP "\fBmaster\fR \fBrunmute\fR | \fBru\fR : mute right master channel (monitored via \fBsetrmute\fR boolean )" 3
.IX Item "master runmute | ru : mute right master channel (monitored via setrmute boolean )"
.IP "\fB<ch\fR> \fBunmute\fR | \fBu\fR : mute selected channel (monitored via setmute boolean )" 3
.IX Item "<ch> unmute | u : mute selected channel (monitored via setmute boolean )"
.IP "\fB<ch\fR> \fBsetmute\fR <boolean> : set mute value (monitoring: /airmon/etc/<ch>/setmute <boolean>)" 3
.IX Item "<ch> setmute <boolean> : set mute value (monitoring: /airmon/etc/<ch>/setmute <boolean>)"
.IP "\fBmaster\fR \fBsetlmute\fR <boolean> : set l\-master mute value (monitoring: /airmon/etc/master/setlmute <boolean>)" 3
.IX Item "master setlmute <boolean> : set l-master mute value (monitoring: /airmon/etc/master/setlmute <boolean>)"
.IP "\fBmaster\fR \fBsetrmute\fR <boolean> : set r\-master mute value (monitoring: /airmon/etc/master/setrmute <boolean>)" 3
.IX Item "master setrmute <boolean> : set r-master mute value (monitoring: /airmon/etc/master/setrmute <boolean>)"
.IP "\fBmutelock\fR directive is machine-generated and controls the second mute layer during solo operations" 3
.IX Item "mutelock directive is machine-generated and controls the second mute layer during solo operations"
.PD
\&\s-1NOTE:\s0 solo also operates on complex spans, for instance 1\-3,7 will set solo the corresponding channels.
.SS "\fBsolo\fP and \fBpresolo\fP switches policy"
.IX Subsection "solo and presolo switches policy"
\&\fBsolo\fR and \fBpresolo\fR switches do the following:
.IP "\fBsolo\fR or a group of solo commands (represented by a \fBcomplex channel span\fR will grab the mixer, disabling the rest of channels. If these are already muted, they will stay muted. If not, they will be \fBsolomuted\fR (= mechanically locked to mute-state). If yes, they will remain muted, but an attempt to unmute them will put them into \fBsolomuted\fR state." 3
.IX Item "solo or a group of solo commands (represented by a complex channel span will grab the mixer, disabling the rest of channels. If these are already muted, they will stay muted. If not, they will be solomuted (= mechanically locked to mute-state). If yes, they will remain muted, but an attempt to unmute them will put them into solomuted state."
.PD 0
.IP "\fBsolo\fR\-ed channels can be muted/unmuted at will" 3
.IX Item "solo-ed channels can be muted/unmuted at will"
.IP "Any channel can be either added to or removed from the \fBsolo span\fR." 3
.IX Item "Any channel can be either added to or removed from the solo span."
.IP "When the last \fBsolo\fR channel is disabled, all \fBsolomuted\fR channels will \fBreturn to the previous state\fR, either \fBmuted\fR or \fBunmuted\fR." 3
.IX Item "When the last solo channel is disabled, all solomuted channels will return to the previous state, either muted or unmuted."
.IP "same policy applies on \fBprelisten\fR bus solo (\fBpresolo\fR)" 3
.IX Item "same policy applies on prelisten bus solo (presolo)"
.PD
.SS "\fBprelisten\fP bus"
.IX Subsection "prelisten bus"
.IP "\fBch\fR \fBprelisten\fR | \fBpl\fR: add the channel to the pre-listening bus (separate prelisten monitoring audio port)" 3
.IX Item "ch prelisten | pl: add the channel to the pre-listening bus (separate prelisten monitoring audio port)"
.PD 0
.IP "\fBch\fR \fBpremute\fR | \fBpm\fR: remove the channel from the pre-listening bus (separate prelisten monitoring audio port)" 3
.IX Item "ch premute | pm: remove the channel from the pre-listening bus (separate prelisten monitoring audio port)"
.IP "\fBch\fR \fBpresolo\fR | \fBps\fR: set the channel as pre-listening \fBsolo\fR  : adjusts all \fBpremute\fR values and also sends \fBsetpresolo\fR boolean to the corresponding channel(s)" 3
.IX Item "ch presolo | ps: set the channel as pre-listening solo : adjusts all premute values and also sends setpresolo boolean to the corresponding channel(s)"
.IP "\fBch\fR \fBunpresolo\fR | \fBups\fR: set the channel as pre-listening \fBsolo\fR  : adjusts all \fBpremute\fR values and also sends \fBsetpresolo\fR boolean to the corresponding channel(s)" 3
.IX Item "ch unpresolo | ups: set the channel as pre-listening solo : adjusts all premute values and also sends setpresolo boolean to the corresponding channel(s)"
.IP "\fBch\fR \fBsetpremute\fR : boolean directive (fit for monitoring: /airmon/etc/<ch>/setpremute  <boolean> )" 3
.IX Item "ch setpremute : boolean directive (fit for monitoring: /airmon/etc/<ch>/setpremute <boolean> )"
.IP "\fBch\fR \fBsetsolopremute\fR : machine generated solomute directive on presolo bus" 3
.IX Item "ch setsolopremute : machine generated solomute directive on presolo bus"
.PD
.SS "\fBother globals\fP"
.IX Subsection "other globals"
.IP "\fBhuman\fR | \fBnonhuman\fR : set \s-1OSC\s0 input policy. \fBnonhuman\fR will: 1) not dereference complex spans (only per-channel or global addressing remains) and 2) treat all timing arguments as miliseconds (not hh:mm:ss.msc format). \fBhuman\fR reverts this behaviour to normal (enabled complex spans and hh:mm:ss.msc format)" 3
.IX Item "human | nonhuman : set OSC input policy. nonhuman will: 1) not dereference complex spans (only per-channel or global addressing remains) and 2) treat all timing arguments as miliseconds (not hh:mm:ss.msc format). human reverts this behaviour to normal (enabled complex spans and hh:mm:ss.msc format)"
.PD 0
.IP "\fBpanic\fR : all channel faders set to 0" 3
.IX Item "panic : all channel faders set to 0"
.IP "\fBdir\fR | \fBcd\fR : set global wavedata directory" 3
.IX Item "dir | cd : set global wavedata directory"
.IP "\fBls\fR : get global wavedata directory" 3
.IX Item "ls : get global wavedata directory"
.IP "\fBtrimfader\fR : set \fBtrimfader time\fR or \fBtrimfader type\fR  \fB[#]\fR" 3
.IX Item "trimfader : set trimfader time or trimfader type [#]"
.IP "\fBcenterpan\fR : center all pans" 3
.IX Item "centerpan : center all pans"
.IP "\fBfullout\fR : set all faders to full" 3
.IX Item "fullout : set all faders to full"
.IP "\fBstereopan\fR : set even-numbered faders to 0 and odd-numbered faders to 1 (receiving in full stereo mode)" 3
.IX Item "stereopan : set even-numbered faders to 0 and odd-numbered faders to 1 (receiving in full stereo mode)"
.IP "\fBglobepan\fR : evenly distribute panning across panorama 0\-1 accross all channels" 3
.IX Item "globepan : evenly distribute panning across panorama 0-1 accross all channels"
.IP "\fBlstracks\fR : list numbers / configuration of input and output tracks through the rightmost outlet of [gpp\-air\-coremix] element (via set message)" 3
.IX Item "lstracks : list numbers / configuration of input and output tracks through the rightmost outlet of [gpp-air-coremix] element (via set message)"
.IP "\fBlatency\fR / \fBlatencystop\fR : starts / stops measuring console latency (audio and control). The values are reported to the control (3rd) outlet of the [gpp\-air\-coremix] element (via set message)" 3
.IX Item "latency / latencystop : starts / stops measuring console latency (audio and control). The values are reported to the control (3rd) outlet of the [gpp-air-coremix] element (via set message)"
.IP "\fBsetff\fR : set server's fanning factor (distance between serial \s-1OSC\s0 monitoring request, somewhere between 2 and 6, default 3 ) :: the serial monitoring requests (fader, pan) get distributed after the following formula:" 3
.IX Item "setff : set server's fanning factor (distance between serial OSC monitoring request, somewhere between 2 and 6, default 3 ) :: the serial monitoring requests (fader, pan) get distributed after the following formula:"
.IP "\fBsetmode\fR : set server's monitoring mode (auto, mirror, coarse). See 'Two main server-side monitoring modes' below." 3
.IX Item "setmode : set server's monitoring mode (auto, mirror, coarse). See 'Two main server-side monitoring modes' below."
.RS 3
.IP "\fBfader\fR : (<ch> * <\s-1FF\s0> * 2) msec \s-1DELAY\s0" 5
.IX Item "fader : (<ch> * <FF> * 2) msec DELAY"
.IP "\fBpan\fR : (<ch> * <\s-1FF\s0>) msec \s-1DELAY\s0" 5
.IX Item "pan : (<ch> * <FF>) msec DELAY"
.RE
.RS 3
.RE
.IP "\fBalivesig\fR on / off : turn alive signals on / off. In the left bottom corner of the iConsole and CoreMixer there are rectangular symbols \fBiCo\fR and \fBSrv\fR. If \fBalivesig\fR is running they will show the state of connection:" 3
.IX Item "alivesig on / off : turn alive signals on / off. In the left bottom corner of the iConsole and CoreMixer there are rectangular symbols iCo and Srv. If alivesig is running they will show the state of connection:"
.RS 3
.IP "\fBiCo\fR is green : iConsole is connected (server-side monitoring)" 5
.IX Item "iCo is green : iConsole is connected (server-side monitoring)"
.IP "\fBSrv\fR is green : Server is connected (client-side monitoring)" 5
.IX Item "Srv is green : Server is connected (client-side monitoring)"
.IP "both red in case of opposite" 5
.IX Item "both red in case of opposite"
.RE
.RS 3
.RE
.IP "\fBreset\fR : erase autosave mixer data. By default, mixer has 2 sec interval autosave (autosave.txt). Persistence survives mixer-restart and mixer-resize. This command resets all parameters." 3
.IX Item "reset : erase autosave mixer data. By default, mixer has 2 sec interval autosave (autosave.txt). Persistence survives mixer-restart and mixer-resize. This command resets all parameters."
.IP "\fBfadertype\fR lin / log : set linear or logarhytmic fader tipe. \fBsetfadertype\fR boolean [ \s-1NOT YET IMPLEMENTED ON\s0 iCONSOLE!!! ]" 3
.IX Item "fadertype lin / log : set linear or logarhytmic fader tipe. setfadertype boolean [ NOT YET IMPLEMENTED ON iCONSOLE!!! ]"
.PD
.SH "\fBINTERNAL CLIENT\- COMMANDS\fP"
.IX Header "INTERNAL CLIENT- COMMANDS"
These are client\- (console) initiated
.IP "/airmix/cinit/ bang => client signalizing server their own loadbang and querying for initial parameters such as number of channels, airdir etc. This request is handled separately on air-coremixer input." 3
.IX Item "/airmix/cinit/ bang => client signalizing server their own loadbang and querying for initial parameters such as number of channels, airdir etc. This request is handled separately on air-coremixer input."
.SH "\fBPRELISTEN BUS\fP"
.IX Header "PRELISTEN BUS"
Unless in the \fBlight\fR audio-scheme scenario \fBPrelisten bus\fR itself will not be provided by the server. It will be rendered by the client, gpp-air-console will render their own bus from all channels gathered via jacktrip.
.PP
On the contrary, \fBlight\fR mode [#] will provide prelisten bus, as well as master-mix.
.IP "\fBch\fR \fBprelisten\fR \fBpreunmute\fR | \fBpl pu\fR: add the channel to the pre-listening bus (separate prelisten monitoring audio port)  (monitoring: /airmon/etc/prelisten 1 )" 3
.IX Item "ch prelisten preunmute | pl pu: add the channel to the pre-listening bus (separate prelisten monitoring audio port) (monitoring: /airmon/etc/prelisten 1 )"
.PD 0
.IP "\fBch\fR \fBpremute\fR | \fBpm\fR: remove the channel from the pre-listening bus (separate prelisten monitoring audio port)  (monitoring: /airmon/etc/prelisten 0 )" 3
.IX Item "ch premute | pm: remove the channel from the pre-listening bus (separate prelisten monitoring audio port) (monitoring: /airmon/etc/prelisten 0 )"
.IP "\fBch\fR \fBpresolo\fR | \fBps\fR: set the channel as pre-listening \fBsolo\fR  (monitoring: /airmon/etc/presolo  )" 3
.IX Item "ch presolo | ps: set the channel as pre-listening solo (monitoring: /airmon/etc/presolo )"
.IP "\fBsetprelevel\fR : set the level of prelistening bus. Bound to 'jump' (50ms) ramp, not gpp-airliner. This know is per-ch only. There is no master volume. Available via \fB/airmon/etc/[ch]/setprelevel\fR" 3
.IX Item "setprelevel : set the level of prelistening bus. Bound to 'jump' (50ms) ramp, not gpp-airliner. This know is per-ch only. There is no master volume. Available via /airmon/etc/[ch]/setprelevel"
.PD
.SH "AIRMIX EXAMPLES [broadcast by the user/client sender such as \fBairsh\fP]"
.IX Header "AIRMIX EXAMPLES [broadcast by the user/client sender such as airsh]"
.SS "\s-1MASTER\s0"
.IX Subsection "MASTER"
.IP "/airmix/master/lfader 1 : set left master fader" 3
.IX Item "/airmix/master/lfader 1 : set left master fader"
.PD 0
.IP "/airmix/master/rfader 0.235 : set right master fader" 3
.IX Item "/airmix/master/rfader 0.235 : set right master fader"
.IP "/airmix/master/fader 0.5 : set both master faders" 3
.IX Item "/airmix/master/fader 0.5 : set both master faders"
.PD
.SS "\s-1CHANNELS\s0"
.IX Subsection "CHANNELS"
.IP "/airmix/3/fader 1 : set fader #3" 3
.IX Item "/airmix/3/fader 1 : set fader #3"
.PD 0
.IP "/airmix/3\-5,7/fader 1 : set faders #3,#4,#5 and #7" 3
.IX Item "/airmix/3-5,7/fader 1 : set faders #3,#4,#5 and #7"
.IP "/airmix/odd/fader 1 : set odd faders" 3
.IX Item "/airmix/odd/fader 1 : set odd faders"
.IP "/airmix/all/fader 1 3000 sin : start all faders' ramp to 1, 3000 ms, sinusoidal curve" 3
.IX Item "/airmix/all/fader 1 3000 sin : start all faders' ramp to 1, 3000 ms, sinusoidal curve"
.IP "/airmix/even/pan .5 6000 pow : start even pans' ramp to .5, 6 sec, power curve" 3
.IX Item "/airmix/even/pan .5 6000 pow : start even pans' ramp to .5, 6 sec, power curve"
.IP "/airmix/4,5/pan 0 4000 log 6234 : start channel's 4 and 5 pan ramp to 0 in 4 s, logarhytmic curve, after 6,234 sec delay" 3
.IX Item "/airmix/4,5/pan 0 4000 log 6234 : start channel's 4 and 5 pan ramp to 0 in 4 s, logarhytmic curve, after 6,234 sec delay"
.IP "/airmix/even/play test.wav : play file test.wav on even channels" 3
.IX Item "/airmix/even/play test.wav : play file test.wav on even channels"
.IP "/airmix/even/play test.wav 0:05 : play file test.wav on the even channels from 0:05 to the end" 3
.IX Item "/airmix/even/play test.wav 0:05 : play file test.wav on the even channels from 0:05 to the end"
.IP "/airmix/even/play test.wav 0:05 : play file test.wav on the even channels from 0:05 to the end" 3
.IX Item "/airmix/even/play test.wav 0:05 : play file test.wav on the even channels from 0:05 to the end"
.IP "/airmix/1\-4/loop test.wav 0:20 0:22.123 +0:03.120 : loop file test.wav on channels 1\-4 clipped at 0:20 to 0:22.123 with 0:03.120 delay/gap" 3
.IX Item "/airmix/1-4/loop test.wav 0:20 0:22.123 +0:03.120 : loop file test.wav on channels 1-4 clipped at 0:20 to 0:22.123 with 0:03.120 delay/gap"
.IP "/airmix/3/record myrecording.wav 0:25 : record to myrecording.wav after 0:25 delay (with pre-count)" 3
.IX Item "/airmix/3/record myrecording.wav 0:25 : record to myrecording.wav after 0:25 delay (with pre-count)"
.PD
.SS "\s-1CHANNEL\- AND GLOBAL\- ALIASES\s0"
.IX Subsection "CHANNEL- AND GLOBAL- ALIASES"
.IP "/airmix/odd mute : mute odd channels" 3
.IX Item "/airmix/odd mute : mute odd channels"
.PD 0
.IP "/airmix/3,4\-5 solo : solo channels 3,4 and 5" 3
.IX Item "/airmix/3,4-5 solo : solo channels 3,4 and 5"
.IP "/airmix/panic : panic (turn all faders down)" 3
.IX Item "/airmix/panic : panic (turn all faders down)"
.IP "/airmix/ls : get info about the server audio storage directory" 3
.IX Item "/airmix/ls : get info about the server audio storage directory"
.IP "/airmix/trimfader : set trimfader time and type" 3
.IX Item "/airmix/trimfader : set trimfader time and type"
.IP "/airmix/centerpan : center all pans" 3
.IX Item "/airmix/centerpan : center all pans"
.IP "/airmix/stereopan : set all pans to stereo mode" 3
.IX Item "/airmix/stereopan : set all pans to stereo mode"
.IP "/airmix/globepan : equidistant placing of all pans" 3
.IX Item "/airmix/globepan : equidistant placing of all pans"
.IP "/airmux/setmode : set server monitoring mode" 3
.IX Item "/airmux/setmode : set server monitoring mode"
.IP "(...)" 3
.PD
.SH "AIRMON :: AIR CORE MONITORING OSC COMMAND PROTOCOL"
.IX Header "AIRMON :: AIR CORE MONITORING OSC COMMAND PROTOCOL"
.SS "\s-1MONITORING TACTICS\s0"
.IX Subsection "MONITORING TACTICS"
Serves dispatching information about the mixer state to all subordinated (remote) web client subjects. While the data, dispatched on momentary basis, does not represent a problem regarding the \s-1OSC\s0 traffic demands, all continuous data types, such as fader pan etc, represent a challenge. Air engine will internally handle such types by the usage of signal-level streaming, therefore monitoring can be done using 3 different tactics:
.IP "\fBA request\fR : whole \fBrequest\fR (for instance: fader .5 3000 sin 6000) is transfered (copied from the airmix \s-1OSC\s0 input) to the web clients and clients themselves will take care about rendering itself, from begining to end. Not only \fBgpp-airliner\fR directive, but also timer requests can be given this way." 3
.IX Item "A request : whole request (for instance: fader .5 3000 sin 6000) is transfered (copied from the airmix OSC input) to the web clients and clients themselves will take care about rendering itself, from begining to end. Not only gpp-airliner directive, but also timer requests can be given this way."
.PD 0
.IP "\fBB snapshot\fR : current state of controller transferred on periodical basis (metronome pulse). Intermediate request data is sent using relatively low frequency in order to avoid \s-1OSC\s0 wire overheads" 3
.IX Item "B snapshot : current state of controller transferred on periodical basis (metronome pulse). Intermediate request data is sent using relatively low frequency in order to avoid OSC wire overheads"
.IP "\fBC contour\fR : this tactics is actually a modification of \fBsnapshot\fR tactics, but will only send \fBsnapshot\fR to the client(s) when \fB\s-1RF\s0 (request_fulfilled)\fR signal on the respected controller is broadcast (this is called \fB\s-1VR\s0 (value_reached)\fR, also provided by gpp\-airliner~). So instead of metronome pulse, the initiative for broadcasting \fBsnapshot\fR is based on reaching controllers' border states. All intermediate request data is ignored. This tactics alone can be used for low bandwidth cases, but also to complement tactics \fBA\fR and \fBB\fR. With the \fBA\fR tactics, it can help assure that the final state is obeyed regardless of potential server/client desync. With the \fBB\fR tactics it can assure that the border state information is delivered exactly in time, even if the server's snapshot heartbeat is low." 3
.IX Item "C contour : this tactics is actually a modification of snapshot tactics, but will only send snapshot to the client(s) when RF (request_fulfilled) signal on the respected controller is broadcast (this is called VR (value_reached), also provided by gpp-airliner~). So instead of metronome pulse, the initiative for broadcasting snapshot is based on reaching controllers' border states. All intermediate request data is ignored. This tactics alone can be used for low bandwidth cases, but also to complement tactics A and B. With the A tactics, it can help assure that the final state is obeyed regardless of potential server/client desync. With the B tactics it can assure that the border state information is delivered exactly in time, even if the server's snapshot heartbeat is low."
.PD
.SS "\s-1OSC CONTROLLER MAP\s0"
.IX Subsection "OSC CONTROLLER MAP"
\fI\s-1MONITORING TACTICS:\s0\fR
.IX Subsection "MONITORING TACTICS:"
.IP "\fBA. \s-1REQUEST\s0\fR" 3
.IX Item "A. REQUEST"
/airmon/request/<ch>/<controller> <request params>
.Sp
any kind of user-request as such, copied directly from the \s-1OSC\s0 input for each respective controller, such as:
.RS 3
.IP "/airmon/request/<ch>/\fBfader\fR <airliner~ params>" 5
.IX Item "/airmon/request/<ch>/fader <airliner~ params>"
.PD 0
.IP "/airmon/request/<ch>/\fBpan\fR <airliner~ params>" 5
.IX Item "/airmon/request/<ch>/pan <airliner~ params>"
.PD
_
.RE
.RS 3
.RE
.IP "\fBA2. \s-1VIRTUAL REQUEST\s0\fR" 3
.IX Item "A2. VIRTUAL REQUEST"
A request assembled by the server engine (not passed by the user) in order to encapsule bandwidth-demanding movement to be rendered by the client engine, such as:
.RS 3
.IP "/airmon/request/<ch>/\fBtimer\fR/<type> [start|stop] [initial_timing_ms]?" 5
.IX Item "/airmon/request/<ch>/timer/<type> [start|stop] [initial_timing_ms]?"
\&\fBdisplay\fR timer, where <type> can be \*(L"play\*(R" or \*(L"record\*(R"
.RE
.RS 3
.Sp
_
.RE
.IP "\fBB. \s-1SNAPSHOT\s0\fR" 3
.IX Item "B. SNAPSHOT"
/airmon/snapshot/<ch>/<controller>
.Sp
\&\fBcontroller\fR state at the very moment
.IP "\fBC. \s-1CONTOUR\s0\fR" 3
.IX Item "C. CONTOUR"
/airmon/contour/<ch>/...
.Sp
separate reporting of basic border states :: the point of this tactics is to report some basic params that the client (web or pd) can use to render their own movement. There are several 'contour handlers', such as:
.RS 3
.IP "... \fBrf\fR/<controller> => \fBcontroller\fR rf when reached (request fulfilled => reached destination boolean (1=yes 0=not yet), fader or pan" 5
.IX Item "... rf/<controller> => controller rf when reached (request fulfilled => reached destination boolean (1=yes 0=not yet), fader or pan"
.PD 0
.IP "... \fBvr\fR/<controller> => \fBcontroller\fR vr when rf reached (value reached => the actual destination value triggered when reached, fader or pan, and also play, record (border states)" 5
.IX Item "... vr/<controller> => controller vr when rf reached (value reached => the actual destination value triggered when reached, fader or pan, and also play, record (border states)"
.IP "... \fBac\fR/<controller> => \fBcontroller\fR ac (active) : play, record and such things => player is active boolean (1=yes, 0=not)" 5
.IX Item "... ac/<controller> => controller ac (active) : play, record and such things => player is active boolean (1=yes, 0=not)"
.RE
.RS 3
.RE
.PD
.PP
*note difference between \fBrf\fR and \fBac\fR switches: \fBrf\fR policy is negative (= positive when not active) while \fBac\fR policy is positive (= negative when not active).
.PP
\fI\s-1ALL THE REST\s0\fR
.IX Subsection "ALL THE REST"
.PP
All data that cannot be ranged into the 3 main monitoring tactics, will be passed via \fBetc\fR
.IP "/airmon/etc/<anyparam> => other data or switches, non policy-classified" 3
.IX Item "/airmon/etc/<anyparam> => other data or switches, non policy-classified"
.PD 0
.IP "/airmon/etc/<ch>/<anyparam> => other data or switches, non policy-classified : per-channel" 3
.IX Item "/airmon/etc/<ch>/<anyparam> => other data or switches, non policy-classified : per-channel"
.PD
.PP
for instance:
.IP "/airmon/etc/<ch>/filename/ => current file name distributed exactly before each play\- or record\- request" 5
.IX Item "/airmon/etc/<ch>/filename/ => current file name distributed exactly before each play- or record- request"
.PD 0
.IP "/airmon/etc/<ch>/mute => mute boolean for the selected channel" 5
.IX Item "/airmon/etc/<ch>/mute => mute boolean for the selected channel"
.IP "/airmon/etc/master/mute => master mute boolean (both channels)" 5
.IX Item "/airmon/etc/master/mute => master mute boolean (both channels)"
.IP "/airmon/etc/master/rmute => master mute boolean (right channel only)" 5
.IX Item "/airmon/etc/master/rmute => master mute boolean (right channel only)"
.IP "/airmon/etc/master/lmute => master mute boolean (left channel only)" 5
.IX Item "/airmon/etc/master/lmute => master mute boolean (left channel only)"
.PD
.PP
\fI\s-1DIRECT SYS PARAMS\s0\fR
.IX Subsection "DIRECT SYS PARAMS"
.PP
System params (internal communication between air-coremix and console, without user interaction) are sent via /sys/ and /syscore/ controllers. \fB/sys/\fR will deliver the messaga to the console frontend (shell that envelopes console-core) and \fB/syscore/\fR will to the console core itself. These params is no thing the end user should be bothered with.
.IP "/airmon/sys/CHNUM/ => number of channels, required by gpp-air-coremixer creation argument \- the console automatically resizes if the argument changes." 5
.IX Item "/airmon/sys/CHNUM/ => number of channels, required by gpp-air-coremixer creation argument - the console automatically resizes if the argument changes."
.PD 0
.IP "/airmon/syscore/AIRDIR/ => airdir path storage (path itself stored as text)" 5
.IX Item "/airmon/syscore/AIRDIR/ => airdir path storage (path itself stored as text)"
.IP "/airmon/syscore/SHOW/ [boolean] => show / hide console" 5
.IX Item "/airmon/syscore/SHOW/ [boolean] => show / hide console"
.PD
.SH "\fBTWO MAIN SERVER-SIDE MONITORING MODES BASED ON DIFFERENT MONITORING TACTICS\fP"
.IX Header "TWO MAIN SERVER-SIDE MONITORING MODES BASED ON DIFFERENT MONITORING TACTICS"
.IP "\fB\s-1MIRROR\s0\fR and \fB\s-1COARSE\s0\fR :: implementing \fBcontour\fR and \fBsnapshot\fR tactics:" 3
.IX Item "MIRROR and COARSE :: implementing contour and snapshot tactics:"
.RS 3
.PD 0
.IP "\fB\s-1MIRROR\s0\fR : use \fBboth\fR tactics => high bandwidth and low client capacity; will report border states and intermediate snapshots according to network capacity (tunable). \fBContour\fR skeleton is used to prevent possible timing-based anomalies, especially with extremely lo frequency monitoring heartbeat." 5
.IX Item "MIRROR : use both tactics => high bandwidth and low client capacity; will report border states and intermediate snapshots according to network capacity (tunable). Contour skeleton is used to prevent possible timing-based anomalies, especially with extremely lo frequency monitoring heartbeat."
.IP "\fB\s-1COARSE\s0\fR : use \fBonly contour tactic\fR => low bandwidth and low client capacity; will only report border (crucial) states." 5
.IX Item "COARSE : use only contour tactic => low bandwidth and low client capacity; will only report border (crucial) states."
.RE
.RS 3
.RE
.IP "\fB\s-1AUTO\s0\fR  :: use \fBrequest\fR and \fBsnapshot\fR tactics => client themselves will render events; this is only safe when client is capable of running puredata console.  Suitable for very low web bandwidth. \fBContour\fR skeleton is used to prevent possible timing-based anomalies." 3
.IX Item "AUTO :: use request and snapshot tactics => client themselves will render events; this is only safe when client is capable of running puredata console. Suitable for very low web bandwidth. Contour skeleton is used to prevent possible timing-based anomalies."
.PD
Server can be set to either mode in terms of communicating with its console(s):
.RS 3
.IP "/airmix/\fBsetmode mirror\fR or airsh \fBsetmode mirror\fR :: set mirroring mode (contour + snapshot)" 5
.IX Item "/airmix/setmode mirror or airsh setmode mirror :: set mirroring mode (contour + snapshot)"
.PD 0
.IP "/airmix/\fBsetmode coarse\fR or airsh \fBsetmode coarse\fR :: set mirroring mode with only contour tactics enabled" 5
.IX Item "/airmix/setmode coarse or airsh setmode coarse :: set mirroring mode with only contour tactics enabled"
.IP "/airmix/\fBsetmode auto\fR or airsh \fBsetmode auto\fR :: set autonomous mode (all rendering based on request tactics data vectors)" 5
.IX Item "/airmix/setmode auto or airsh setmode auto :: set autonomous mode (all rendering based on request tactics data vectors)"
.IP "/airmix/\fBlsmode\fR :: list currently selected monitoring mode" 5
.IX Item "/airmix/lsmode :: list currently selected monitoring mode"
.RE
.RS 3
.RE
.PD
.SH "\fBAIRSH EXAMPLES\fP EXAMPLES> [broadcast by user/client]"
.IX Header "AIRSH EXAMPLES EXAMPLES> [broadcast by user/client]"
airsh m fader 1 2000 sin => fade complex curve
.PP
airsh 1 fader .3 4000 log 2000 => fade after delay
.PP
airsh play file.wav 0:12.345 0:15.012 +1:0.300 => play a clip after delay
.PP
airsh loop file.wav 0:12.345 0:15.012 +1:0.300 => loop a clip after delay
.PP
airsh rec 0:10 0:15 => record 15 seconds after 10 seconds delay
.SH "\fBAIRMON PROTOCOL EXAMPLES\fP [broadcast by gpp\-air\-coremix/server]"
.IX Header "AIRMON PROTOCOL EXAMPLES [broadcast by gpp-air-coremix/server]"
/airmon/request/master/lfader/ 1 3000 sin
.PP
/airmon/request/master/rfader/ 1 3000 sin
.PP
/airmon/request/master/fader/ 1 3000 sin
.PP
/airmon/snapshot/1/fader .346567
.PP
/airmon/contour/master/rf/lfader 1
.PP
/airmon/contour/master/rf/lfader 1
.PP
/airmon/contour/3/ac/player 1
.PP
/airmon/contour/1/timer/player start 3543 down
.PP
/airmon/contour/1/timer/player stop
.PP
/airmon/contour/3/timer/recorder start 0 up
.SH "\fBAUTHOR\fP"
.IX Header "AUTHOR"
Gregor Pirs <gregor.pirs@guest.arnes.si>
.SH "\fBVERSION\fP"
.IX Header "VERSION"
\&\f(CW\*(C`[3\-1\-2023]\*(C'\fR
