#!/usr/bin/perl -w


#################################################################################################
# airfront main tool :: transfer and conversion of local recordings, documentation and metadata #
# B-AIR project, EU CE									        #
#################################################################################################


#db
use lib "/home/gregor/software/yellowroom/pm";
use lib "/home/gregor/audio/pd-projects/work/wavedata/air/airfront/DB/";
use airfront::Schema;

#soxi interface : audio file analisys 
use lib "/home/gregor/audio/pd-projects/work/wavedata/air/airfront/soxi/";
use soxi;
#adsox interface : sox adhoc frontend
use lib "/home/gregor/audio/pd-projects/work/wavedata/air/airfront/adsox/";
use adsox;

#user interface
use lib "/home/gregor/audio/pd-projects/work/wavedata/air/airfront/UI/";
use airfrontui;

#YAML
use YAML ();
#use YAML qw /freeze thaw Bless/;
#file stuff
use File::Find;
use File::Path;
use Cwd;

my $PWD = getcwd;
my $SOXI = soxi->new;
my $SOX = adsox->new;

#misc
use Data::Dumper;
use Term::ANSIColor (qw/:constants/);
use Switch;
use Pod::Usage;
use Term::ReadLine;
use utf8;
use DateTime qw();
use Number::Format;
use feature qw/say/;

#use IO::Handle;
use Try::Tiny;
use autodie;

#getopt
use Getopt::Long qw(GetOptionsFromString :config require_order no_ignore_case);

# gp goodies
use dbac; #db dumper
use optchain; #options chainer 

my $DBG=1;
my $LOCALHOST='gregor@matangi';
my $REMOTEHOST='gregor@kohai';
my $TEMPDIR="/home/gregor/temp/airfront/";
my $REMOTEHOME="/home/gregor/air/aerotheque/";
my $LASTTEMP=""; #Global for temp post-removal
my $LASTREMOTE=""; #Global for remote rollback-removal

# SSH
use Net::OpenSSH;
my $SSH=Net::OpenSSH->new($REMOTEHOST);
#$SSH->error and die "Couldn't establish SSH connection: ". $SSH->error;

#RSYNC
#use File::Rsync;
# my $RSYNC=File::Rsync->new(
#     archive      => 1,
#     compress     => 1,
#     rsh          => '/usr/bin/ssh',
#     'rsync-path' => '/usr/bin/rsync',
#     'info' => 'progress2' #won't work!!
#     );


#sig catcher
 $SIG{INT} = sub {
    __PACKAGE__->storage->dbh->disconnect;
    say "SIGINT CALLED";
};

my $AFDB= airfront::Schema->connect(
					 'dbi:Pg:dbname="airfront"', 
					 'gregor', 
					 'hvala',
					 { AutoCommit => 1 }, #transaction autocommit 
					 { pg_enable_utf8 => 1 } #Additionally the pg_enable_utf8 should be set to ensure unicode data is correctly marked.
    );

    my $oc=optchain->new;

GetOptions (
    'test|t=s{0,}' => sub{ $oc->array('t',$_[1],\&test)},
    'list|l=s{0,1}' => sub{ $oc->scalar('what',$_[1],\&list)},
    'pwd' => sub{ $oc->scalar('source',$PWD)},
    'source=s' => sub {$oc->scalar('source',$_[1])},
    'resync|r' => sub{$oc->caller(\&resync)},
    'flush|f' => sub{$oc->caller(\&flush)}, #also, flush will be called if not explicitely invoked, =default
    'nosync|ns' => sub{$oc->boolean('nosync');},
    ) or die("Error in command line arguments\n");

$oc->run({default_caller=>\&flush});

######################## default handler

say "|=========================================|";
say "";
warn "ALL DONE";

exit;

=pod

=encoding utf8

=head1 SYNOPSIS

airify :: AIR platform (EU CE 2020-23) Audiodata frontend. 

Swallow whole musical directories and flush metadata to airfront database

=head1 OPTIONS

=head2 -l <PARAM>  - list db entries

=over 3

=item WHERE <PARAM> = 

=item --

B<AIRC catalogue number> to match B<(exact)> if preceeded with :nn (:2,:3) B<OR>  

=item -- 

B<recording date> to match B<(exact)> if preceeded with @ (@2.5.2023) B<OR>

=item -- 

B<any other (string) field> (title|author/s|performer/s s) to match B<(ilike)> if starting with any other character than : or @


=back

=cut




########
# SUBS #
########


sub test {


    #reseq and get both counters from reseq();
    my $next=$AFDB->resultset('Public_Reseq')->search()->first;
    say "NEXT AIRC: ",$next->airc;
    say "NEXT AIRR: ",$next->airr;
    
    exit;
    try {
        die "foo";
} catch {
        warn "caught error: $_";
    };

    exit;
    my $oh=shift;
    $DBG and warn "airify.test called";

    exit;
    $SOX->infile("/home/gregor/audio/BAIR_SORS1/Audio Files/Audio 10_01.wav");
    $SOX->outfile("/home/gregor/fooAir.wav");
    $SOX->r(48000)->b(16)->execute;
    

    exit;

    print Dumper($oh);


#    $rsyncobj->defopts(@options);
#    --info=progress2 

    exit;
    my $found = $AFDB->resultset('Public_Card')->find(1);

    $DBG and say "CARD_AIRC: ",$found->airc;
    $DBG and say "PROJECT_TITLE: ",$found->title;
    
    my $hr={
	'args' => $oh->{'t'},
	'airc' => $found->airc,
	'name' => $found->title,
    };

    # this will (1) make selection of keys (2) set the dump order of keys
    YAML::Bless($hr)->keys(['airc','title','args']);
    
    $DBG and say "YAML OUTPUT =====";
    $DBG and print YAML::Dump($hr); 
    $DBG and say "===========";

    YAML::DumpFile("/home/gregor/yamltest", $hr);

#    say "PWD ",$PWD;
#    find(\&wanted, $PWD);

    $DBG and say "MYSOX TEST";
    $SOX->debug(1)->infile("/home/gregor/airtest.wav")->r(44100)->c(2)->outfile("/home/gregor/airtest_441.wav")->execute;

    $SOX->debug(0)->b(24)->execute;
  
    $AFUI=airfrontui->new($AFDB); #init with airfront DB schema
    $AFUI->input_gtk3;

    print Dumper($AFUI->self);
    $DBG and say $AFUI->date; #accessors
    
    
}; #test


#list airfront objects
sub list{
    my $oh=shift;
    $DBG and warn "airify.list called";
    $DBG and print Dumper($oh);
   
    
    my $AFUI=airfrontui->new($AFDB); #init with airfront DB schema
    $AFUI->cardsel($oh->{'what'} || ""); #NOTE: cardsel = scalar with its own policy of transforming into search hash, see man
    $AFUI->list_gtk3;
}#list


sub new{
    my $oh=shift;
    $DBG and warn "airify.new called";
}#new



sub makewanted{
    my $audio=shift;
    return sub {
	$_ =~ m/.wav$|.WAV$|.aiff$|.AIFF$/ or return;
	$DBG and say "\n***FOUND AUDIO: ",$File::Find::name;
	$SOXI->path("$File::Find::name");
	my $rec={};
	$rec->{'host'}=$LOCALHOST;
	$rec->{'path'}=$File::Find::name;
	$rec->{'type'}=$SOXI->type;
	$rec->{'samplerate'}=$SOXI->samplerate;
	$rec->{'bitrate'}=$SOXI->bps;
	$rec->{'channels'}=$SOXI->channels;
	$rec->{'duration'}=$SOXI->duration;
	$rec->{'duration_ms'}=$SOXI->duration_sec * 1000;
	$rec->{'encoding'}=$SOXI->encoding;
	push @{$audio},$rec;
    }#sub
}; #makewanted


#========================================

#flush a local dir to the server with all transformations needed
sub flush {
	my %ap = (%{$_[0]},%{$_[1]});
	my $oh=\%ap;
	$DBG and warn "airify.flush called";
	$DBG and print "ALLPARAMS ",Dumper($oh);
	
	
	$oh->{'source'} or die "PLEASE DEFINE SOURCE";
	# $oh->{'source'}=$PWD;

	my $audio=[];
	find(makewanted($audio),$oh->{'source'});
	#    $DBG and print "AUDIO ",Dumper($audio);

	#####################################
	# USER INTERFACE
	my $AFUI=airfrontui->new($AFDB); #init with airfront DB schema
	$AFUI->source($oh->{'source'}); #
	$AFUI->audio($audio); #store found audio
	$AFUI->remotehost($REMOTEHOST);
	$AFUI->remotehome($REMOTEHOME);
	$AFUI->nextcn($AFDB->resultset('Public_Card')->get_column('airc')->max + 1);
	$AFUI->input_gtk3;

	say "";
	say "|=========================================|";
	say "|                AIRFRONT                 |";
	say "|=========================================|";
	# IF DATA SUBMITTED
	if ($AFUI->submitted){
	    try {
		$AFDB->txn_begin;
		$DBG and warn "UI SUBMITTED CALLED";
		$DBG and print "CARD ",Dumper($AFUI->card);
		
		$AFUI->card->{'date'} =~ m/\d{1,2}\.\d{1,2}\.\d{4}/ or die "(!)WRONG DATE FORMAT: ".$AFUI->card->{'date'};
		
		#==BEGIN
		
		my $new_card=$AFDB->resultset('Public_Card')->create($AFUI->card);
		
		#GLOBAL/POSTREMOVAL
		$LASTTEMP=$TEMPDIR."AIRC_".$new_card->airc;
		my $rd=$new_card->airc;
		if (defined $rd and $rd){$LASTREMOTE=$REMOTEHOME."AIRC_".$rd;}else{undef $LASTREMOTE;};
		
		#CREATE/PREUNLINK TEMPORAL DIR
		if (!-d $TEMPDIR){mkdir $TEMPDIR;}
		if (-d $TEMPDIR."AIRC_".$new_card->airc){rmtree ($TEMPDIR."AIRC_".$new_card->airc)};
		mkdir $TEMPDIR."AIRC_".$new_card->airc;
		
		for (@{$AFUI->audio}){
		    #warning: $_ hash is SOURCE RECORDING!
		    
		    #PROJECT DESTINATION RECORDING
		    my $new_recording=$AFDB->resultset('Public_Recording')->create({'airc'=>$new_card->airc});
		    
		    #STORE SOURCE
		    $_->{'airr'}=$new_recording->airr;
		    my $new_source=$AFDB->resultset('Public_Source')->create($_);
		    
		    my $tempfile=$TEMPDIR."AIRC_".$new_card->airc."/AIRR_".$new_recording->airr.".wav";
		    
		    
		    #CONVERT ALL FILES TO TEMPDIR
		    
		    #converting to 16/48 (wav), but not changing number of channels... 
		    print "SOX CONVERTING ".$_->{'path'};
		    
		    #HERE, whats the difference between sox -G (guard against clipping) and sox gain -1 (just lowering gain for 1 db) ==> provided that the files are produced professionaly, so only the computational clipping will occur
		    #unless ( $SOX->debug(1)->infile("$_->{'path'}")->r(48000)->b(16)->outfile($tempfile)->add('gain',-1)->execute ){ $AFDB->txn_rollback; print "\n"; die "SOX FAILED for ".$_->{'path'}; }else{say " ... OK"};
		    #raw - no gain corection
#		    		    unless ( $SOX->debug(0)->infile("$_->{'path'}")->r(48000)->b(16)->outfile($tempfile)->execute ){ print "\n"; die "SOX FAILED for ".$_->{'path'}; }else{say " ... OK"};
		    
		    #GUARD + -1DB gain => seems the all-troubles-solver:
		    #		    unless ( $SOX->debug(0)->G()->infile("$_->{'path'}")->r(48000)->b(16)->outfile($tempfile)->add('gain',-1)->execute ){ print "\n"; die "SOX FAILED for ".$_->{'path'}; }else{say " ... OK"};

		    $SOX->debug(0)->G()->infile("$_->{'path'}")->r(48000)->b(16)->outfile($tempfile)->add('gain',-1)->execute;
		    say " ... OK";
		    
		    $SOXI->path("$tempfile");
		    $rec->{'host'}=$REMOTEHOST;
		    $rec->{'path'}=$REMOTEHOME."AIRC_".$new_card->airc."/AIRR_".$new_recording->airr.".wav";
		    $rec->{'type'}=$SOXI->type;
		    $rec->{'samplerate'}=$SOXI->samplerate;
		    $rec->{'bitrate'}=$SOXI->bps;
		    $rec->{'channels'}=$SOXI->channels;
		    $rec->{'duration'}=$SOXI->duration;
		    $rec->{'duration_ms'}=$SOXI->duration_sec * 1000;
		    $rec->{'encoding'}=$SOXI->encoding;
		    
		    #update (destination) recording metadata 
		    $new_recording->update($rec);
		}#all recordings - audio
		
		
		#YAML EXPORT
		#metadata.yaml
		my $metahash={};
		my $audioheaders={};
		my $audiosources={};
		
		%{$metahash}=%{$AFUI->card};
		$metahash->{'airc'}=$new_card->airc;
		$metahash->{'ts'}=$AFDB->resultset("Public_Card")->find($new_card->airc)->ts;
		for ($AFDB->resultset("Public_Recording")->search_rs({'airc'=>$new_card->airc})->all){
		    push @{$metahash->{'recordings'}},"AIRR_".$_->airr.".wav";
		    $audioheaders->{"AIRR_".$_->airr.".wav"}{'samplerate'}=$_->samplerate;
		    $audioheaders->{"AIRR_".$_->airr.".wav"}{'bitrate'}=$_->bitrate;
		    $audioheaders->{"AIRR_".$_->airr.".wav"}{'channels'}=$_->channels;
		    $audioheaders->{"AIRR_".$_->airr.".wav"}{'encoding'}=$_->encoding;
		    $audioheaders->{"AIRR_".$_->airr.".wav"}{'type'}=$_->type;
		    $audioheaders->{"AIRR_".$_->airr.".wav"}{'duration'}=$_->duration;
		    $audioheaders->{"AIRR_".$_->airr.".wav"}{'duration_ms'}=sprintf("%.3f", $_->duration_ms); #dokler request

		    for my $s($_->source){
			$audiosources->{"AIRR_".$_->airr.".wav"}{'host'}=$s->host;
			$audiosources->{"AIRR_".$_->airr.".wav"}{'path'}=$s->path;
			$audiosources->{"AIRR_".$_->airr.".wav"}{'samplerate'}=$s->samplerate;
			$audiosources->{"AIRR_".$_->airr.".wav"}{'bitrate'}=$s->bitrate;
			$audiosources->{"AIRR_".$_->airr.".wav"}{'channels'}=$s->channels;
			$audiosources->{"AIRR_".$_->airr.".wav"}{'encoding'}=$s->encoding;
			$audiosources->{"AIRR_".$_->airr.".wav"}{'type'}=$s->type;
			$audiosources->{"AIRR_".$_->airr.".wav"}{'duration'}=$s->duration;
			$audiosources->{"AIRR_".$_->airr.".wav"}{'duration_ms'}=$s->duration_ms;
		    };
		    
		};#for recording
		
		YAML::Bless($metahash)->keys(['airc','title','authors','performers','date','recordings','ts']);
		YAML::DumpFile($TEMPDIR."AIRC_".$new_card->airc."/metadata.yaml", $metahash);
		YAML::DumpFile($TEMPDIR."AIRC_".$new_card->airc."/audioheaders.yaml", $audioheaders);
		YAML::DumpFile($TEMPDIR."AIRC_".$new_card->airc."/audiosources.yaml", $audiosources);

		#Except if -nosync option is selected
		unless (exists $oh->{'nosync'} and $oh->{'nosync'}){
		    #RSYNC WHOLE PROJECT DIRECTORY TO THE SERVER
		    #	$AFUI->progressbar_gtk3;
		    say "";
		    
		    say "RSYNC: ".$TEMPDIR."AIRC_".$new_card->airc." => ".$REMOTEHOST.":".$REMOTEHOME;
		    #		my $ret=system 'rsync -av --info=progress2 --stats '.$TEMPDIR.'AIRC_'.$new_card->airc.' '.$REMOTEHOST.':'.$REMOTEHOME;
		    
		    #returns 0 on success
		    if (system 'rsync -av --info=progress2 --stats '.$TEMPDIR.'AIRC_'.$new_card->airc.' '.$REMOTEHOST.':'.$REMOTEHOME){die "RSYNC FAILED for AIRC_".$new_card->airc;}else{say " ... OK";};
		    #temp cleanup at POST
		};#UNLESS NOSYNC
		    #	$AFUI->donedialog_gtk3;  
		    
		#==COMMIT
		$AFDB->txn_commit; 	
		return 1;
	    }catch{
		say "ERROR :: TRANSACTION CANCELLED \n\t | $_ ";
		#perform RESEQ()
		$AFDB->txn_rollback; 	
		my $n=$AFDB->resultset('Public_Reseq')->search()->first;
		say "RESEQ: airc=",$n->airc," airr=",$n->airr;
		#REMOVE LOCAL TEMP
		rmtree $LASTTEMP;
		warn ("REMOVING TEMPORAL DIR ".$LASTTEMP);
		#REMOVE REMOTE DIR
		if (defined $LASTREMOTE){
		    warn ("REMOVING REMOTE DIR ".$LASTREMOTE);
		    system ("ssh ".$REMOTEHOST." rm -r ".$LASTREMOTE);
		}

		return 0;
	    };
	    
	}#ifsubmitted
}; #flush




#resync  audio; goes through the DB, checks for existence of files and flushes all the missing audio
sub resync {
    my %ap = (%{$_[0]},%{$_[1]}); #both, optchain preamble and postamble
    $DBG and warn "airify.resync called";
    $DBG and print "ALLPARAMS ",Dumper(\%ap);


    exit;
}; #resync


    

